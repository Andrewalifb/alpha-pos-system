// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: point_transaction.proto

package loyalty_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosPointsTransactionServiceClient is the client API for PosPointsTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosPointsTransactionServiceClient interface {
	CreatePosPointsTransaction(ctx context.Context, in *CreatePosPointsTransactionRequest, opts ...grpc.CallOption) (*CreatePosPointsTransactionResponse, error)
	ReadPosPointsTransaction(ctx context.Context, in *ReadPosPointsTransactionRequest, opts ...grpc.CallOption) (*ReadPosPointsTransactionResponse, error)
	UpdatePosPointsTransaction(ctx context.Context, in *UpdatePosPointsTransactionRequest, opts ...grpc.CallOption) (*UpdatePosPointsTransactionResponse, error)
	DeletePosPointsTransaction(ctx context.Context, in *DeletePosPointsTransactionRequest, opts ...grpc.CallOption) (*DeletePosPointsTransactionResponse, error)
	ReadAllPosPointsTransactions(ctx context.Context, in *ReadAllPosPointsTransactionsRequest, opts ...grpc.CallOption) (*ReadAllPosPointsTransactionsResponse, error)
}

type posPointsTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosPointsTransactionServiceClient(cc grpc.ClientConnInterface) PosPointsTransactionServiceClient {
	return &posPointsTransactionServiceClient{cc}
}

func (c *posPointsTransactionServiceClient) CreatePosPointsTransaction(ctx context.Context, in *CreatePosPointsTransactionRequest, opts ...grpc.CallOption) (*CreatePosPointsTransactionResponse, error) {
	out := new(CreatePosPointsTransactionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosPointsTransactionService/CreatePosPointsTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posPointsTransactionServiceClient) ReadPosPointsTransaction(ctx context.Context, in *ReadPosPointsTransactionRequest, opts ...grpc.CallOption) (*ReadPosPointsTransactionResponse, error) {
	out := new(ReadPosPointsTransactionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosPointsTransactionService/ReadPosPointsTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posPointsTransactionServiceClient) UpdatePosPointsTransaction(ctx context.Context, in *UpdatePosPointsTransactionRequest, opts ...grpc.CallOption) (*UpdatePosPointsTransactionResponse, error) {
	out := new(UpdatePosPointsTransactionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosPointsTransactionService/UpdatePosPointsTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posPointsTransactionServiceClient) DeletePosPointsTransaction(ctx context.Context, in *DeletePosPointsTransactionRequest, opts ...grpc.CallOption) (*DeletePosPointsTransactionResponse, error) {
	out := new(DeletePosPointsTransactionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosPointsTransactionService/DeletePosPointsTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posPointsTransactionServiceClient) ReadAllPosPointsTransactions(ctx context.Context, in *ReadAllPosPointsTransactionsRequest, opts ...grpc.CallOption) (*ReadAllPosPointsTransactionsResponse, error) {
	out := new(ReadAllPosPointsTransactionsResponse)
	err := c.cc.Invoke(ctx, "/pos.PosPointsTransactionService/ReadAllPosPointsTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosPointsTransactionServiceServer is the server API for PosPointsTransactionService service.
// All implementations must embed UnimplementedPosPointsTransactionServiceServer
// for forward compatibility
type PosPointsTransactionServiceServer interface {
	CreatePosPointsTransaction(context.Context, *CreatePosPointsTransactionRequest) (*CreatePosPointsTransactionResponse, error)
	ReadPosPointsTransaction(context.Context, *ReadPosPointsTransactionRequest) (*ReadPosPointsTransactionResponse, error)
	UpdatePosPointsTransaction(context.Context, *UpdatePosPointsTransactionRequest) (*UpdatePosPointsTransactionResponse, error)
	DeletePosPointsTransaction(context.Context, *DeletePosPointsTransactionRequest) (*DeletePosPointsTransactionResponse, error)
	ReadAllPosPointsTransactions(context.Context, *ReadAllPosPointsTransactionsRequest) (*ReadAllPosPointsTransactionsResponse, error)
	mustEmbedUnimplementedPosPointsTransactionServiceServer()
}

// UnimplementedPosPointsTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosPointsTransactionServiceServer struct {
}

func (UnimplementedPosPointsTransactionServiceServer) CreatePosPointsTransaction(context.Context, *CreatePosPointsTransactionRequest) (*CreatePosPointsTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosPointsTransaction not implemented")
}
func (UnimplementedPosPointsTransactionServiceServer) ReadPosPointsTransaction(context.Context, *ReadPosPointsTransactionRequest) (*ReadPosPointsTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosPointsTransaction not implemented")
}
func (UnimplementedPosPointsTransactionServiceServer) UpdatePosPointsTransaction(context.Context, *UpdatePosPointsTransactionRequest) (*UpdatePosPointsTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosPointsTransaction not implemented")
}
func (UnimplementedPosPointsTransactionServiceServer) DeletePosPointsTransaction(context.Context, *DeletePosPointsTransactionRequest) (*DeletePosPointsTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosPointsTransaction not implemented")
}
func (UnimplementedPosPointsTransactionServiceServer) ReadAllPosPointsTransactions(context.Context, *ReadAllPosPointsTransactionsRequest) (*ReadAllPosPointsTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosPointsTransactions not implemented")
}
func (UnimplementedPosPointsTransactionServiceServer) mustEmbedUnimplementedPosPointsTransactionServiceServer() {
}

// UnsafePosPointsTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosPointsTransactionServiceServer will
// result in compilation errors.
type UnsafePosPointsTransactionServiceServer interface {
	mustEmbedUnimplementedPosPointsTransactionServiceServer()
}

func RegisterPosPointsTransactionServiceServer(s grpc.ServiceRegistrar, srv PosPointsTransactionServiceServer) {
	s.RegisterService(&PosPointsTransactionService_ServiceDesc, srv)
}

func _PosPointsTransactionService_CreatePosPointsTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosPointsTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosPointsTransactionServiceServer).CreatePosPointsTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosPointsTransactionService/CreatePosPointsTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosPointsTransactionServiceServer).CreatePosPointsTransaction(ctx, req.(*CreatePosPointsTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosPointsTransactionService_ReadPosPointsTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosPointsTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosPointsTransactionServiceServer).ReadPosPointsTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosPointsTransactionService/ReadPosPointsTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosPointsTransactionServiceServer).ReadPosPointsTransaction(ctx, req.(*ReadPosPointsTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosPointsTransactionService_UpdatePosPointsTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosPointsTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosPointsTransactionServiceServer).UpdatePosPointsTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosPointsTransactionService/UpdatePosPointsTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosPointsTransactionServiceServer).UpdatePosPointsTransaction(ctx, req.(*UpdatePosPointsTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosPointsTransactionService_DeletePosPointsTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosPointsTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosPointsTransactionServiceServer).DeletePosPointsTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosPointsTransactionService/DeletePosPointsTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosPointsTransactionServiceServer).DeletePosPointsTransaction(ctx, req.(*DeletePosPointsTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosPointsTransactionService_ReadAllPosPointsTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosPointsTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosPointsTransactionServiceServer).ReadAllPosPointsTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosPointsTransactionService/ReadAllPosPointsTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosPointsTransactionServiceServer).ReadAllPosPointsTransactions(ctx, req.(*ReadAllPosPointsTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosPointsTransactionService_ServiceDesc is the grpc.ServiceDesc for PosPointsTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosPointsTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosPointsTransactionService",
	HandlerType: (*PosPointsTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosPointsTransaction",
			Handler:    _PosPointsTransactionService_CreatePosPointsTransaction_Handler,
		},
		{
			MethodName: "ReadPosPointsTransaction",
			Handler:    _PosPointsTransactionService_ReadPosPointsTransaction_Handler,
		},
		{
			MethodName: "UpdatePosPointsTransaction",
			Handler:    _PosPointsTransactionService_UpdatePosPointsTransaction_Handler,
		},
		{
			MethodName: "DeletePosPointsTransaction",
			Handler:    _PosPointsTransactionService_DeletePosPointsTransaction_Handler,
		},
		{
			MethodName: "ReadAllPosPointsTransactions",
			Handler:    _PosPointsTransactionService_ReadAllPosPointsTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "point_transaction.proto",
}
