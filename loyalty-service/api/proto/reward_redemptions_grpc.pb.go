// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: reward_redemptions.proto

package loyalty_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosRewardRedemptionServiceClient is the client API for PosRewardRedemptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosRewardRedemptionServiceClient interface {
	CreatePosRewardRedemption(ctx context.Context, in *CreatePosRewardRedemptionRequest, opts ...grpc.CallOption) (*CreatePosRewardRedemptionResponse, error)
	ReadPosRewardRedemption(ctx context.Context, in *ReadPosRewardRedemptionRequest, opts ...grpc.CallOption) (*ReadPosRewardRedemptionResponse, error)
	UpdatePosRewardRedemption(ctx context.Context, in *UpdatePosRewardRedemptionRequest, opts ...grpc.CallOption) (*UpdatePosRewardRedemptionResponse, error)
	DeletePosRewardRedemption(ctx context.Context, in *DeletePosRewardRedemptionRequest, opts ...grpc.CallOption) (*DeletePosRewardRedemptionResponse, error)
	ReadAllPosRewardRedemptions(ctx context.Context, in *ReadAllPosRewardRedemptionsRequest, opts ...grpc.CallOption) (*ReadAllPosRewardRedemptionsResponse, error)
}

type posRewardRedemptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosRewardRedemptionServiceClient(cc grpc.ClientConnInterface) PosRewardRedemptionServiceClient {
	return &posRewardRedemptionServiceClient{cc}
}

func (c *posRewardRedemptionServiceClient) CreatePosRewardRedemption(ctx context.Context, in *CreatePosRewardRedemptionRequest, opts ...grpc.CallOption) (*CreatePosRewardRedemptionResponse, error) {
	out := new(CreatePosRewardRedemptionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRewardRedemptionService/CreatePosRewardRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRewardRedemptionServiceClient) ReadPosRewardRedemption(ctx context.Context, in *ReadPosRewardRedemptionRequest, opts ...grpc.CallOption) (*ReadPosRewardRedemptionResponse, error) {
	out := new(ReadPosRewardRedemptionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRewardRedemptionService/ReadPosRewardRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRewardRedemptionServiceClient) UpdatePosRewardRedemption(ctx context.Context, in *UpdatePosRewardRedemptionRequest, opts ...grpc.CallOption) (*UpdatePosRewardRedemptionResponse, error) {
	out := new(UpdatePosRewardRedemptionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRewardRedemptionService/UpdatePosRewardRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRewardRedemptionServiceClient) DeletePosRewardRedemption(ctx context.Context, in *DeletePosRewardRedemptionRequest, opts ...grpc.CallOption) (*DeletePosRewardRedemptionResponse, error) {
	out := new(DeletePosRewardRedemptionResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRewardRedemptionService/DeletePosRewardRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRewardRedemptionServiceClient) ReadAllPosRewardRedemptions(ctx context.Context, in *ReadAllPosRewardRedemptionsRequest, opts ...grpc.CallOption) (*ReadAllPosRewardRedemptionsResponse, error) {
	out := new(ReadAllPosRewardRedemptionsResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRewardRedemptionService/ReadAllPosRewardRedemptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosRewardRedemptionServiceServer is the server API for PosRewardRedemptionService service.
// All implementations must embed UnimplementedPosRewardRedemptionServiceServer
// for forward compatibility
type PosRewardRedemptionServiceServer interface {
	CreatePosRewardRedemption(context.Context, *CreatePosRewardRedemptionRequest) (*CreatePosRewardRedemptionResponse, error)
	ReadPosRewardRedemption(context.Context, *ReadPosRewardRedemptionRequest) (*ReadPosRewardRedemptionResponse, error)
	UpdatePosRewardRedemption(context.Context, *UpdatePosRewardRedemptionRequest) (*UpdatePosRewardRedemptionResponse, error)
	DeletePosRewardRedemption(context.Context, *DeletePosRewardRedemptionRequest) (*DeletePosRewardRedemptionResponse, error)
	ReadAllPosRewardRedemptions(context.Context, *ReadAllPosRewardRedemptionsRequest) (*ReadAllPosRewardRedemptionsResponse, error)
	mustEmbedUnimplementedPosRewardRedemptionServiceServer()
}

// UnimplementedPosRewardRedemptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosRewardRedemptionServiceServer struct {
}

func (UnimplementedPosRewardRedemptionServiceServer) CreatePosRewardRedemption(context.Context, *CreatePosRewardRedemptionRequest) (*CreatePosRewardRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosRewardRedemption not implemented")
}
func (UnimplementedPosRewardRedemptionServiceServer) ReadPosRewardRedemption(context.Context, *ReadPosRewardRedemptionRequest) (*ReadPosRewardRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosRewardRedemption not implemented")
}
func (UnimplementedPosRewardRedemptionServiceServer) UpdatePosRewardRedemption(context.Context, *UpdatePosRewardRedemptionRequest) (*UpdatePosRewardRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosRewardRedemption not implemented")
}
func (UnimplementedPosRewardRedemptionServiceServer) DeletePosRewardRedemption(context.Context, *DeletePosRewardRedemptionRequest) (*DeletePosRewardRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosRewardRedemption not implemented")
}
func (UnimplementedPosRewardRedemptionServiceServer) ReadAllPosRewardRedemptions(context.Context, *ReadAllPosRewardRedemptionsRequest) (*ReadAllPosRewardRedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosRewardRedemptions not implemented")
}
func (UnimplementedPosRewardRedemptionServiceServer) mustEmbedUnimplementedPosRewardRedemptionServiceServer() {
}

// UnsafePosRewardRedemptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosRewardRedemptionServiceServer will
// result in compilation errors.
type UnsafePosRewardRedemptionServiceServer interface {
	mustEmbedUnimplementedPosRewardRedemptionServiceServer()
}

func RegisterPosRewardRedemptionServiceServer(s grpc.ServiceRegistrar, srv PosRewardRedemptionServiceServer) {
	s.RegisterService(&PosRewardRedemptionService_ServiceDesc, srv)
}

func _PosRewardRedemptionService_CreatePosRewardRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosRewardRedemptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRewardRedemptionServiceServer).CreatePosRewardRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRewardRedemptionService/CreatePosRewardRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRewardRedemptionServiceServer).CreatePosRewardRedemption(ctx, req.(*CreatePosRewardRedemptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRewardRedemptionService_ReadPosRewardRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosRewardRedemptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRewardRedemptionServiceServer).ReadPosRewardRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRewardRedemptionService/ReadPosRewardRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRewardRedemptionServiceServer).ReadPosRewardRedemption(ctx, req.(*ReadPosRewardRedemptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRewardRedemptionService_UpdatePosRewardRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosRewardRedemptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRewardRedemptionServiceServer).UpdatePosRewardRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRewardRedemptionService/UpdatePosRewardRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRewardRedemptionServiceServer).UpdatePosRewardRedemption(ctx, req.(*UpdatePosRewardRedemptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRewardRedemptionService_DeletePosRewardRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosRewardRedemptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRewardRedemptionServiceServer).DeletePosRewardRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRewardRedemptionService/DeletePosRewardRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRewardRedemptionServiceServer).DeletePosRewardRedemption(ctx, req.(*DeletePosRewardRedemptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRewardRedemptionService_ReadAllPosRewardRedemptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosRewardRedemptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRewardRedemptionServiceServer).ReadAllPosRewardRedemptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRewardRedemptionService/ReadAllPosRewardRedemptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRewardRedemptionServiceServer).ReadAllPosRewardRedemptions(ctx, req.(*ReadAllPosRewardRedemptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosRewardRedemptionService_ServiceDesc is the grpc.ServiceDesc for PosRewardRedemptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosRewardRedemptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosRewardRedemptionService",
	HandlerType: (*PosRewardRedemptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosRewardRedemption",
			Handler:    _PosRewardRedemptionService_CreatePosRewardRedemption_Handler,
		},
		{
			MethodName: "ReadPosRewardRedemption",
			Handler:    _PosRewardRedemptionService_ReadPosRewardRedemption_Handler,
		},
		{
			MethodName: "UpdatePosRewardRedemption",
			Handler:    _PosRewardRedemptionService_UpdatePosRewardRedemption_Handler,
		},
		{
			MethodName: "DeletePosRewardRedemption",
			Handler:    _PosRewardRedemptionService_DeletePosRewardRedemption_Handler,
		},
		{
			MethodName: "ReadAllPosRewardRedemptions",
			Handler:    _PosRewardRedemptionService_ReadAllPosRewardRedemptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward_redemptions.proto",
}
